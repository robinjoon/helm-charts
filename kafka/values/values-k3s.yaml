# K3s 환경을 위한 Kafka 설정 (소규모 프로덕션 환경)
# 일간 사용자 수십명, CPU 최대 2, 메모리 최대 16GiB

global:
  defaultStorageClass: nfs-client

# 컨트롤러 노드 설정 (Kafka Brokers)
controller:
  # 고가용성을 위한 3브로커 설정
  replicaCount: 3

  # 리소스 제한 설정 (브로커당)
  resources:
    requests:
      cpu: 300m
      memory: 1Gi
    limits:
      cpu: 500m
      memory: 4Gi

  # JVM 힙 메모리 설정 (메모리 제한의 50% 정도)
  heapOpts: "-Xmx2g -Xms2g"

  # 로그 및 데이터 보존 정책 (소규모 환경에 맞게 조정)
  config: |
    # 로그 보존 시간 (7일)
    log.retention.hours=168
    # 로그 세그먼트 크기 (소규모 환경에 맞게 축소)
    log.segment.bytes=536870912
    # 압축 활성화 (저장공간 절약)
    compression.type=snappy
    # 소규모 환경을 위한 기본 파티션 수
    num.partitions=2
    # 복제 팩터 (3브로커 환경)
    default.replication.factor=3
    min.insync.replicas=2
    # 메모리 효율성을 위한 설정
    replica.fetch.max.bytes=1048576
    message.max.bytes=1000012
    # 네트워크 스레드 최적화
    num.network.threads=3
    num.io.threads=3
    # 백그라운드 스레드 수 조정
    background.threads=4
    # 소켓 버퍼 크기 조정
    socket.send.buffer.bytes=102400
    socket.receive.buffer.bytes=102400
    socket.request.max.bytes=104857600

  # 데이터 퍼시스턴스 설정 (브로커당)
  persistence:
    enabled: true
    storageClass: nfs-client
    size: 20Gi
    accessModes:
      - ReadWriteMany

  # 로그 퍼시스턴스 설정 (브로커당)
  logPersistence:
    enabled: true
    storageClass: nfs-client
    size: 10Gi
    accessModes:
      - ReadWriteMany

# 브로커 설정 (컨트롤러와 분리된 브로커 비활성화)
broker:
  replicaCount: 0

# 오토스케일링 비활성화 (소규모 환경)
autoscaling:
  hpa:
    enabled: false
  vpa:
    enabled: false

# 메트릭 및 모니터링 (최소한으로 설정)
metrics:
  kafka:
    enabled: true
    # JMX exporter 리소스 최소화
    resources:
      requests:
        cpu: 50m
        memory: 64Mi
      limits:
        cpu: 100m
        memory: 128Mi
  jmx:
    enabled: false

# 외부 액세스 설정 (클러스터 외부 접근 비활성화)
externalAccess:
  enabled: false

# Kafka 클라이언트 설정 (SSL/TLS 사용)
listeners:
  client:
    protocol: SSL
    containerPort: 9092
    sslClientAuth: none
  controller:
    protocol: SSL
    containerPort: 9093
    sslClientAuth: none
  interbroker:
    protocol: SSL
    containerPort: 9094
    sslClientAuth: none
  external:
    protocol: SSL
    containerPort: 9095
    sslClientAuth: none

# 보안 설정 (소규모 내부 환경을 위해 단순화)
auth:
  client:
    enabled: false
  interbroker:
    enabled: false

# SASL 비활성화
sasl:
  enabledMechanisms: ""
  interbroker:
    mechanism: ""

# 프로브 설정 (리소스 절약을 위해 조정)
livenessProbe:
  enabled: true
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

startupProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 15
  successThreshold: 1

# PodDisruptionBudget 설정 (3브로커 환경)
pdb:
  create: true
  minAvailable: 2
  maxUnavailable: 1

# kraft 모드 설정 (ZooKeeper 없이 운영)
kraft:
  enabled: true

# ZooKeeper 비활성화 (kraft 모드 사용)
zookeeper:
  enabled: false

# 외부 ZooKeeper 설정 비활성화
externalZookeeper:
  servers: []

# 서비스 설정
service:
  type: ClusterIP
  ports:
    client: 9092
    controller: 9093

# NetworkPolicy 비활성화 (소규모 환경)
networkPolicy:
  enabled: false

# 볼륨 권한 초기화 컨테이너 설정
# TLS/SSL 인증서 설정 (cert-manager + Let's Encrypt 사용)
tls:
  type: PEM
  pemChainIncluded: true
  # cert-manager를 이용한 자동 인증서 발급
  autoGenerated:
    enabled: true
    engine: cert-manager
    customAltNames: []
    certManager:
      existingIssuer: letsencrypt-dns01
      existingIssuerKind: ClusterIssuer
      keyAlgorithm: RSA
      keySize: 2048
      duration: 2160h  # 90일
      renewBefore: 360h  # 15일 전 갱신

volumePermissions:
  enabled: true
  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    limits:
      cpu: 100m
      memory: 128Mi